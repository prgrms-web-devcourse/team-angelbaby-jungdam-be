# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# Repo Action 페이지에 나타날 이름
name: Spring Boot & Gradle CI/CD

# Event Trigger
# [ main ] branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음
on:
  push:
    branches: [ main ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-18.04

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPOSITORY_ACCESS_TOKEN }}
          submodules: true

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew


      # Copy test properties (application.yaml)
      - name: copy prod properties file
        run: cp src/main/resources/secret-keys/application-prod.yaml src/main/resources/application.yaml && cp src/main/resources/secret-keys/application-oauth.yaml src/main/resources/application-oauth.yaml

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build

      # Docker Image Build & Push
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_PW }}

      # Docker Image Build & Push
      - name: Docker image build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: dlfdyd96/spring-cicd:latest

      # CodeDeploy Agent
      # --application-name과 --deployment-group-name은 아까 작성하신 애플리케이션 이름과 그룹 이름으로 대체하시면 됩니다.
      # [Your GitHub Repository] 예시) Woomin-Jeon/facebook-clone-server
      # "commitId=${GITHUB_SHA}" 코드가 자동으로 최신 commit을 불러옵니다.
      # 아까 보관해두었던 AWS_ACCESS_KEY_ID와 AWS_SECRET_ACCESS_KEY는 GitHub secrets에 저장해둡니다.
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          Default_region_name: ap-northeast-2
        run: |
          aws deploy --region ap-northeast-2 \
          create-deployment \
          --application-name jungdam-springboot \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --deployment-group-name jungdam-deploy-group \
          --github-location repository=jung-dam-diary/team-angelbaby-jungdam-be,commitId=${GITHUB_SHA}
